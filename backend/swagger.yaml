openapi: 3.0.0
info:
  title: Wanderlust Voyages API
  description: APIs for all operations concerning Wanderlust Voyages. This API is part of the Wanderlust Voyages project. Â© Vijay
  version: 1.0.0
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - BearerAuth: []
paths:
  /api/v1/signup:
    post:
      tags:
        - Auth
      summary: User Signup
      description: Registers a new user.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: john_doe
                userId:
                  type: string
                  example: usr-35cfe51232
                email:
                  type: string
                  example: john@example.com
                password:
                  type: string
                  example: Passw0rd!
      responses:
        '200':
          description: User registered successfully.
        '400':
          description: Bad request.
  /api/v1/signin:
    post:
      tags:
        - Auth
      summary: User Signin
      description: Authenticates a user.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john@example.com
                password:
                  type: string
                  example: Passw0rd!
      responses:
        '200':
          description: User signed in successfully.
        '401':
          description: Unauthorized.
  /api/v1/signup-mail:
    post:
      tags:
        - Auth
      summary: Signup Email
      description: Sends a verification email after signup.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john@example.com
      responses:
        '200':
          description: Verification email sent successfully.
        '400':
          description: Bad request.
  /api/v1/forgot-password-mail:
    post:
      tags:
        - Auth
      summary: Forgot Password Email
      description: Sends an email with a reset link for forgotten passwords.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john@example.com
      responses:
        '200':
          description: Reset link email sent successfully.
        '400':
          description: Bad request.
  /api/v1/verify:
    post:
      tags:
        - Auth
      summary: Verify Account
      description: Verifies the user's account with a token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: some-verification-token
      responses:
        '200':
          description: Account verified successfully.
        '400':
          description: Bad request.
  /api/v1/forgot-password:
    post:
      tags:
        - Auth
      summary: Forgot Password
      description: Handles password reset request.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john@example.com
      responses:
        '200':
          description: Reset link sent successfully.
        '400':
          description: Bad request.
  /api/v1/reset-password/{resetToken}:
    post:
      tags:
        - Auth
      summary: Reset Password
      description: Resets the password using a reset token.
      parameters:
        - name: resetToken
          in: path
          required: true
          schema:
            type: string
          example: some-reset-token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  example: NewPassw0rd!
      responses:
        '200':
          description: Password reset successfully.
        '400':
          description: Bad request.
        '401':
          description: Invalid or expired reset token.
  /api/v1/user/{userId}:
    get:
      tags:
        - User Management
      summary: Get a user by userId
      description: Fetch a specific user by their unique userId.
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to fetch.
          schema:
            type: string
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    example: '12345'
                  name:
                    type: string
                    example: John Doe
                  email:
                    type: string
                    example: john.doe@example.com
        '401':
          description: Unauthorized access
        '404':
          description: User not found
    put:
      tags:
        - User Management
      summary: Update a user by userId
      description: Update the details of an existing user by their unique userId.
      operationId: updateUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized access
        '404':
          description: User not found
    delete:
      tags:
        - User Management
      summary: Delete a user by userId
      description: Delete a user by their unique userId.
      operationId: deleteUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to delete.
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
        '401':
          description: Unauthorized access
        '404':
          description: User not found
  /api/v1/users:
    get:
      tags:
        - User Management
      summary: Get all users
      description: Fetch a list of all users in the system.
      operationId: getAllUsers
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userId:
                      type: string
                    name:
                      type: string
                    email:
                      type: string
        '401':
          description: Unauthorized access
